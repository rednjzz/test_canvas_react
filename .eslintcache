[{"/Users/kyuseoplee/Dev/test_canvas_react/src/index.js":"1","/Users/kyuseoplee/Dev/test_canvas_react/src/hooks/useInput.js":"2","/Users/kyuseoplee/Dev/test_canvas_react/src/fragments.js":"3","/Users/kyuseoplee/Dev/test_canvas_react/src/components/DrawImage.js":"4","/Users/kyuseoplee/Dev/test_canvas_react/src/App.js":"5"},{"size":503,"mtime":1608217297057,"results":"6","hashOfConfig":"7"},{"size":265,"mtime":1608217297057,"results":"8","hashOfConfig":"7"},{"size":957,"mtime":1609390883395,"results":"9","hashOfConfig":"7"},{"size":8394,"mtime":1609929133440,"results":"10","hashOfConfig":"7"},{"size":1925,"mtime":1609812530416,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14","usedDeprecatedRules":"15"},"1opsr8k",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},"/Users/kyuseoplee/Dev/test_canvas_react/src/index.js",["26"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n",["27","28"],"/Users/kyuseoplee/Dev/test_canvas_react/src/hooks/useInput.js",[],"/Users/kyuseoplee/Dev/test_canvas_react/src/fragments.js",[],"/Users/kyuseoplee/Dev/test_canvas_react/src/components/DrawImage.js",["29","30","31","32","33"],"import React, {useState} from 'react'\nimport { gql, useMutation } from '@apollo/client';\nimport useInput from '../hooks/useInput';\nimport {CRANE_DATA_FRAGMENT} from '../fragments';\n\nconst DrawImage = () => {\n  const [ loading, setLoading] = useState(true);\n  const [ craneImage, setcraneImage ] = useState('');\n  const [ craneArray, setCraneArray] = useState([]);\n  const workDistance = useInput(\"\");\n  const workHeight = useInput(\"\");\n  const workWidth = useInput(\"\");\n  const workWeight = useInput(\"\");\n  const blockDistanceInput = useInput(\"\");\n  const blockWidthInput = useInput(\"\");\n  const blockHeightInput = useInput(\"\");\n  const enoughDistance = useInput(\"\");\n  const [safeFactor, setSafeFactor] = useState(\"85\");\n  const [craneLocation, setCraneLocation] = useState(\"back\");\n\n  // const dummyData = \"{\\r\\n        \\\"craneName\\\": \\\"L_1750_9.1\\\",\\r\\n        \\\"craneCode\\\": \\\"TYVEN\\\",\\r\\n        \\\"craneModeName\\\": \\\"LUFFING\\\",\\r\\n        \\\"excelSheetName\\\": \\\"TYVEN_204t_t_198_007_01401\\\",\\r\\n        \\\"craneData\\\": {\\r\\n          \\\"mainBoom\\\": 49.1,\\r\\n          \\\"mainAngle\\\": 84,\\r\\n          \\\"totalExtLength\\\": 9,\\r\\n          \\\"adapter1\\\": 4,\\r\\n          \\\"extBoom1\\\": 5,\\r\\n          \\\"extBoom2\\\": 0,\\r\\n          \\\"extBoom3\\\": 0,\\r\\n          \\\"extBoom4\\\": 0,\\r\\n          \\\"adapter2\\\": 0,\\r\\n          \\\"flyFixLuffing\\\": 70,\\r\\n          \\\"flyFixLuffingAngle\\\": 15.700000000000003,\\r\\n          \\\"distance1\\\": 6.1,\\r\\n          \\\"distance2\\\": 25.9,\\r\\n          \\\"craneDistance\\\": 8.33,\\r\\n          \\\"centerToBuildingDistance\\\": 27,\\r\\n          \\\"centerToBlockDistance\\\": 27,\\r\\n          \\\"craneToBuildingDistance\\\": 18.7,\\r\\n          \\\"craneToBlockDistance\\\": 18.7,\\r\\n          \\\"totalDistance\\\": 32,\\r\\n          \\\"tableDistance\\\": 32,\\r\\n          \\\"height1\\\": 57.8,\\r\\n          \\\"height2\\\": 65,\\r\\n          \\\"totalHeight\\\": 124.8,\\r\\n          \\\"marginHeight\\\": 8.8,\\r\\n          \\\"workingArea\\\": 360,\\r\\n          \\\"tableWeight\\\": 26.1,\\r\\n          \\\"counterWeight\\\": \\\"204\\\",\\r\\n          \\\"overRear\\\": \\\"x\\\",\\r\\n          \\\"optional\\\": \\\"x\\\",\\r\\n          \\\"safetyFactor\\\": 81.4,\\r\\n          \\\"craneLocation\\\": \\\"back\\\",\\r\\n          \\\"workWeight\\\": 25,\\r\\n          \\\"workBuilding\\\": {\\r\\n            \\\"horizontal\\\": 5,\\r\\n            \\\"vertical\\\": 5,\\r\\n            \\\"height\\\": 110\\r\\n          },\\r\\n          \\\"block\\\": {\\r\\n            \\\"vertical1\\\": 0,\\r\\n            \\\"horizontal1\\\": 0,\\r\\n            \\\"height1\\\": 0,\\r\\n            \\\"vertical2\\\": 0,\\r\\n            \\\"height2\\\": 0\\r\\n          }\\r\\n        }\\r\\n      }\";\n  const GET_CRANEIMGAGEV2 = gql`\n    mutation getCraneImageV2($craneData: String!) {\n      getCraneImageV2(craneData: $craneData)\n    }\n  `;\n  const GET_CRANEIMAGEV3 = gql`\n    mutation getCraneImageV3($craneData: TotalCraneDataInput!) {\n      getCraneImageV3(craneData: $craneData)\n    }\n  `;\n  const GET_CRANE_LIST_V2 = gql`\n  mutation getCraneListV2(\n    $safetyFactor: Float!\n    $craneLocation: String!\n    $workBuilding: workBuildingInput!\n    $workWeight: Float!\n    $block: BlockInput\n  ) {\n    getCraneListV2(\n      safetyFactor: $safetyFactor\n      craneLocation: $craneLocation\n      workBuilding: $workBuilding\n      workWeight: $workWeight\n      block: $block\n    ) {\n      craneName\n      craneCode\n      craneModeName\n      excelSheetName\n      craneData {\n        ...CraneDataParts\n      }\n    }\n  }\n  ${CRANE_DATA_FRAGMENT}\n  `;\n\n  const [CraneDataV2Mutation] = useMutation(GET_CRANEIMGAGEV2, {\n    variables: { }\n  });\n  const [CraneDataV3Mutation] = useMutation(GET_CRANEIMAGEV3, {\n    variables: { }\n  });\n  const [craneListMutation] = useMutation(GET_CRANE_LIST_V2, {\n    variables: {\n    },\n  });\n\n  // const onClick = async () => {\n  //   setLoading(true);\n  //   try {\n  //     const {\n  //      data: { getCraneImageV2: imageData }\n  //     } = await CraneDataV2Mutation();\n  //     \n  //     setcraneImage( imageData );\n  //   } catch(e) {\n  //     console.log(e);\n  //     alert(\"Image loading error\");\n  //   } finally {\n  //     setLoading(false);\n  //   }\n  // };\n  const loadImageHandler = async (crane, e) => {\n    setLoading(true);\n    try {\n      console.log(\"뮤테이션시작2\")\n      console.log(crane);\n      delete crane.__typename;\n      delete crane.craneData.__typename;\n      delete crane.craneData.block.__typename;\n      delete crane.craneData.workBuilding.__typename;\n      delete crane.craneData.edgeDistance.__typename;\n      \n      // const {\n      //   data: { getCraneImageV3: imageData }\n      // } = await CraneDataV3Mutation({variables: { craneData: JSON.stringify(crane) }});\n      const {\n        data: { getCraneImageV3: imageData }\n      } = await CraneDataV3Mutation({variables: { craneData: crane }});\n      setcraneImage( imageData );\n      \n      console.log(\"뮤테이션끝2\")\n    } catch(e) {\n      console.log(e);\n      alert(\"Image loading error\");\n    } finally {\n      setLoading(false);\n    }\n  }\n  const handleRigging = async (evt) => {\n    evt.preventDefault();\n    const workDistanceV = workDistance.value;\n    const workHeightV = workHeight.value;\n    const workWeightV = workWeight.value;\n    \n    if (workDistanceV === \"\" || workDistanceV.includes(\" \")) {\n      return alert(\"작업 거리를 입력해주세요.\");\n    } else if (workHeightV === \"\" || workHeightV.includes(\" \")) {\n      return alert(\"작업 높이를 입력해주세요.\");\n    } else if (workWeightV === \"\" || workWeightV.includes(\" \")) {\n      return alert(\"작업 무게를 입력해주세요.(후크 무게 포함)\");\n    } else {\n      try {\n        console.log(\"뮤테이션시작\")\n        setLoading(true);\n        const {\n          data: {getCraneListV2: craneArrayData}\n        } = await craneListMutation({\n          variables: {\n            safetyFactor: parseFloat(safeFactor),\n            craneLocation: craneLocation.toString(),\n            workBuilding: {\n              horizontal: 0,\n              vertical: parseFloat(workDistance.value), //빌딩 폭\n              height: parseFloat(workHeight.value), // 빌딩 높이\n            },\n            workWeight: parseFloat(workWeight.value), // 작업물 무게\n            block: {\n              vertical1: parseFloat(blockDistanceInput.value), //장애물 폭\n              horizontal1: 0,\n              height1: parseFloat(blockHeightInput.value),\n              vertical2: parseFloat(enoughDistance.value),\n              height2: 0,\n            },\n          },\n        });\n        setCraneArray(craneArrayData);\n        // sessionStorage.setItem(\"craneList\", JSON.stringify(craneArrayData));\n      } catch (e) {\n        console.log(e);\n        alert(\"알 수 없는 에러\");\n      } finally {\n        setLoading(false);\n      }\n    }\n  }\n\n  return (\n    <>\n      <h1 style={{margin:\"0 100px\"}}>리깅 테스트 리액트</h1>\n      <div style={{margin:\"10px\"}}>\n        {/* <button style={{display: \"block\"}} onClick={onClick}>이미지 로딩</button> */}\n          <div style={{display:\"inline-block\"}}>\n            <div style={{width:\"500px\",borderWidth:\"1px\", borderStyle:\"solid\"}}>\n              <form onSubmit={handleRigging}>\n                <input  {...workDistance} placeholder=\"작업 거리\"/>\n                <input  {...workHeight} placeholder=\"작업 높이\"/>\n                <input  {...workWeight} placeholder=\"작업 무게\"/>\n                <input  {...blockDistanceInput} placeholder=\"장애물 거리\"/>\n                <input  {...blockHeightInput} placeholder=\"장애물 높이\"/>\n                <input  {...enoughDistance } placeholder=\"여윳거리\"/>\n                <input type=\"submit\" value=\"Submit\" />\n              </form>\n            </div>\n            <ul>\n              {craneArray.map((crane, index) => {\n                return (<li key={crane.craneName + crane.craneCode}><button onClick={(e) => loadImageHandler(crane,e)}>{`${crane.craneName} | ${crane.craneCode}`}</button></li>)\n              })}\n            </ul>\n          </div>\n          <div style={{display:\"inline-block\"}}>\n            {loading ? \n            <div>로딩중...</div> :\n            <div style={{borderWidth:\"1px\", borderStyle:\"solid\", margin:\"0 10px 0 10px\", display:\"inline-block\"}}>\n              <img alt=\"crane 이미지\" style={{width:\"500px\"}} src={craneImage}/>\n            </div>}\n          </div>\n          <div>\n            \n          </div>\n      </div>\n    </>\n  )\n}\n\nexport default DrawImage","/Users/kyuseoplee/Dev/test_canvas_react/src/App.js",["34"],"import { useState, useEffect } from 'react';\nimport { ApolloClient, ApolloProvider, InMemoryCache} from '@apollo/client';\nimport DrawImgae from './components/DrawImage';\nimport useInput from \"./hooks/useInput\";\n\nfunction App() {\n  const [client, setClient] = useState(null);\n  const selectInput = useInput(\"\");\n  const [serverUrl, setServerUrl] = useState(\"http://localhost:4000\");\n\n  const preLoad = async () => {\n    try{\n      const client = new ApolloClient({\n        cache: new InMemoryCache(),\n        request: async operation => {\n          const token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImNrNnJibWNzaDAwMmIwNzgwdmd5NzZlc28iLCJpYXQiOjE2MDY5ODU5MzZ9.PwmRbVoxPymQCo_0X_VDN10aycreq2bWEt0om4PCHb0\"\n          return operation.setContext({\n            headers: { Authorization: `Bearer ${token}` }\n          });\n        },\n        uri: serverUrl,\n        // uri: \"http://192.168.0.150:4000\",\n        // uri: \"http://61.83.147.71:4000\"\n      });\n      setClient(client);\n    } catch(e) {\n      console.error(e);\n    }\n  }\n  useEffect(() => {\n    preLoad();\n  }, [serverUrl])\n  const submitHandler= (evt) => {\n    evt.preventDefault();\n    setServerUrl(selectInput.value);\n    console.log(selectInput.value);\n  }\n  return (\n    client !== null ? (\n      <div className=\"App\">\n      <ApolloProvider client={client}>\n      <form onSubmit={submitHandler}>\n        <label for=\"server-ip\">Choose a Server:</label>\n        <select {...selectInput} name=\"server-ip\">\n          <option value=\"http://localhost:4000\">Localhost</option>\n          <option value=\"http://192.168.0.150:4000\">MacPro</option>\n          <option value=\"http://61.83.147.71:4000\">HP Server</option>\n        </select>\n        <input type=\"submit\" value=\"Submit\"></input>\n      </form>\n      <h1>현재접속 서버 </h1>\n      <h1>{serverUrl}</h1>\n        <DrawImgae/>  \n      </ApolloProvider>\n    </div>  \n    ): null\n  );\n}\n\nexport default App;\n",{"ruleId":"35","severity":1,"message":"36","line":5,"column":8,"nodeType":"37","messageId":"38","endLine":5,"endColumn":23},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"35","severity":1,"message":"43","line":12,"column":9,"nodeType":"37","messageId":"38","endLine":12,"endColumn":18},{"ruleId":"35","severity":1,"message":"44","line":15,"column":9,"nodeType":"37","messageId":"38","endLine":15,"endColumn":24},{"ruleId":"35","severity":1,"message":"45","line":18,"column":22,"nodeType":"37","messageId":"38","endLine":18,"endColumn":35},{"ruleId":"35","severity":1,"message":"46","line":19,"column":25,"nodeType":"37","messageId":"38","endLine":19,"endColumn":41},{"ruleId":"35","severity":1,"message":"47","line":59,"column":10,"nodeType":"37","messageId":"38","endLine":59,"endColumn":29},{"ruleId":"48","severity":1,"message":"49","line":32,"column":6,"nodeType":"50","endLine":32,"endColumn":17,"suggestions":"51"},"no-unused-vars","'reportWebVitals' is defined but never used.","Identifier","unusedVar","no-native-reassign",["52"],"no-negated-in-lhs",["53"],"'workWidth' is assigned a value but never used.","'blockWidthInput' is assigned a value but never used.","'setSafeFactor' is assigned a value but never used.","'setCraneLocation' is assigned a value but never used.","'CraneDataV2Mutation' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'preLoad'. Either include it or remove the dependency array.","ArrayExpression",["54"],"no-global-assign","no-unsafe-negation",{"desc":"55","fix":"56"},"Update the dependencies array to be: [preLoad, serverUrl]",{"range":"57","text":"58"},[1075,1086],"[preLoad, serverUrl]"]